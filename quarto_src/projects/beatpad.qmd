---
title: "Beatpad Chaos"
---

This page demonstrates use of a beat pad (grid of buttons) to demonstrate the game of life, cellular automata,
chaotic attractors, and the Ising/Potts models. 

```{ojs}
//| echo: false
P5 = require("p5")

function* createSketch(sketch) {
  const element = DOM.element('div');
  yield element;
  const instance = new P5(sketch, element, true);
  try {
    while (true) {
      yield element;
    }
  } finally {
    instance.remove();
  }
}
```

## Button layout test
```{js}
let buttons = [];
let cols = 8;
let rows = 8;
let buttonSize = 50;

function setup() {
  createCanvas(cols * buttonSize, rows * buttonSize);
  for (let i = 0; i < cols; i++) {
    buttons[i] = [];
    for (let j = 0; j < rows; j++) {
      buttons[i][j] = new GridButton(i * buttonSize, j * buttonSize, buttonSize);
    }
  }
}

function draw() {
  for (let i = 0; i < cols; i++) {
    for (let j = 0; j < rows; j++) {
      buttons[i][j].display();
    }
  }
}

function mousePressed() {
  for (let i = 0; i < cols; i++) {
    for (let j = 0; j < rows; j++) {
      buttons[i][j].checkClick();
    }
  }
}

class GridButton {
  constructor(x, y, size) {
    this.x = x;
    this.y = y;
    this.size = size;
    this.color = color(255);
  }

  display() {
    fill(this.color);
    rect(this.x, this.y, this.size, this.size);
  }

  checkClick() {
    if (mouseX > this.x && mouseX < this.x + this.size &&
        mouseY > this.y && mouseY < this.y + this.size) {
      this.color = color(random(255), random(255), random(255));
    }
  }
}
```