---
title: "Bird flocking"

Simulation of birds flocking with wing synchronization.

include-before-body:
  text: |
 <style type="text/css">
      body {
        margin: 0;
        background: #d4efff;
        overflow: hidden;
      }
    </style>

<canvas id="boids" width="150" height="150"></canvas>

<script>

// Size of canvas. These get updated to fill the whole browser.
let width = 150;
let height = 150;

const numBoids = 100;
const visualRange = 100;
let mousePos = { x: 0, y: 0 };

// Function to update global mouse position
function updateMousePosition(evt) {
  const rect = document.getElementById("boids").getBoundingClientRect();
  mousePos.x = evt.clientX - rect.left;
  mousePos.y = evt.clientY - rect.top;
}

function setupMousePositionListener() {
  document.getElementById("boids").addEventListener('mousemove', updateMousePosition);
}


var boids = [];

function initBoids() {
  for (var i = 0; i < numBoids; i += 1) {
    boids[boids.length] = {
      x: Math.random() * width,
      y: Math.random() * height,
      dx: Math.random() * 10 - 5,
      dy: Math.random() * 10 - 5,
      history: [],
      theta: Math.random() * 2 * Math.PI,
      theta_history: [],
      dx_history: [],
      dy_history: [],
    };
  }
}

function distance(boid1, boid2) {
  return Math.sqrt(
    (boid1.x - boid2.x) * (boid1.x - boid2.x) +
      (boid1.y - boid2.y) * (boid1.y - boid2.y),
  );
}

// TODO: This is naive and inefficient.
function nClosestBoids(boid, n) {
  // Make a copy
  const sorted = boids.slice();
  // Sort the copy by distance from `boid`
  sorted.sort((a, b) => distance(boid, a) - distance(boid, b));
  // Return the `n` closest
  return sorted.slice(1, n + 1);
}

// Called initially and whenever the window resizes to update the canvas
// size and width/height variables.
function sizeCanvas() {
  const canvas = document.getElementById("boids");
  width = window.innerWidth;
  height = window.innerHeight;
  canvas.width = width;
  canvas.height = height;
}

// Constrain a boid to within the window. If it gets too close to an edge,
// nudge it back in and reverse its direction.
function keepWithinBounds(boid) {
  const margin = 200;
  const turnFactor = 1;

  if (boid.x < margin) {
    boid.dx += turnFactor;
  }
  if (boid.x > width - margin) {
    boid.dx -= turnFactor
  }
  if (boid.y < margin) {
    boid.dy += turnFactor;
  }
  if (boid.y > height - margin) {
    boid.dy -= turnFactor;
  }
}

// Find the center of mass of the other boids and adjust velocity slightly to
// point towards the center of mass.
function flyTowardsCenter(boid) {
  const centeringFactor = 0.005; // adjust velocity by this %

  let centerX = 0;
  let centerY = 0;
  let numNeighbors = 0;

  for (let otherBoid of boids) {
    if (distance(boid, otherBoid) < visualRange) {
      centerX += otherBoid.x;
      centerY += otherBoid.y;
      numNeighbors += 1;
    }
  }

  if (numNeighbors) {
    centerX = centerX / numNeighbors;
    centerY = centerY / numNeighbors;

    boid.dx += (centerX - boid.x) * centeringFactor;
    boid.dy += (centerY - boid.y) * centeringFactor;
  }
}

// Move away from other boids that are too close to avoid colliding
function avoidOthers(boid) {
  const minDistance = 50; // The distance to stay away from other boids
  const avoidFactor = 0.05; // Adjust velocity by this %
  let moveX = 0;
  let moveY = 0;
  for (let otherBoid of boids) {
    if (otherBoid !== boid) {
      if (distance(boid, otherBoid) < minDistance) {
        moveX += boid.x - otherBoid.x;
        moveY += boid.y - otherBoid.y;
      }
    }
  }

  boid.dx += moveX * avoidFactor;
  boid.dy += moveY * avoidFactor;
}

// Find the average velocity (speed and direction) of the other boids and
// adjust velocity slightly to match.
function matchVelocity(boid) {
  const matchingFactor = 0.05; // Adjust by this % of average velocity

  let avgDX = 0;
  let avgDY = 0;
  let numNeighbors = 0;

  for (let otherBoid of boids) {
    if (distance(boid, otherBoid) < visualRange) {
      avgDX += otherBoid.dx;
      avgDY += otherBoid.dy;
      numNeighbors += 1;
    }
  }

  if (numNeighbors) {
    avgDX = avgDX / numNeighbors;
    avgDY = avgDY / numNeighbors;

    boid.dx += (avgDX - boid.dx) * matchingFactor;
    boid.dy += (avgDY - boid.dy) * matchingFactor;
  }
}

// Speed will naturally vary in flocking behavior, but real animals can't go
// arbitrarily fast.
function limitSpeed(boid) {
  const speedLimit = 10;

  const speed = Math.sqrt(boid.dx * boid.dx + boid.dy * boid.dy);
  if (speed > speedLimit) {
    boid.dx = (boid.dx / speed) * speedLimit;
    boid.dy = (boid.dy / speed) * speedLimit;
  }
}

function update_theta(boid){
  let dtheta = 0.01 * Math.sqrt(boid.dx * boid.dx + boid.dy * boid.dy);
  boid.theta += dtheta;
}

// Function to make boids avoid the mouse position
function avoidMouse(boid, radius) {
  const avoidRadius = radius; // Distance within which boids will try to avoid the mouse
  const avoidFactor = 5; // How strongly boids will move away from the mouse

  let dx = boid.x - mousePos.x;
  let dy = boid.y - mousePos.y;
  let distance = Math.sqrt(dx * dx + dy * dy);

  if (distance < avoidRadius) {
    boid.dx += dx / distance * avoidFactor;
    boid.dy += dy / distance * avoidFactor;
  }
}

const DRAW_TRAIL = true;

function drawTrail(ctx, boid) {
  if (DRAW_TRAIL) {
    // ctx.strokeStyle = "#558cf466";
    // ctx.strokeStyle = "#2222";
    
    ctx.lineWidth = 4;
    ctx.beginPath();

    for (let i = 0; i < boid.history.length - 1; i++) {
      ctx.strokeStyle = `rgb(0 0 0 / ${i}%)`
      const start = boid.history[i];
      const end = boid.history[i + 1];

      ctx.moveTo(start[0], start[1]);
      ctx.lineTo(end[0], end[1]);

      const midPoint = [(start[0] + end[0]) / 2, (start[1] + end[1]) / 2];
      const slope = (end[1] - start[1]) / (end[0] - start[0]);
      const perpSlope = -1 / slope;
      const length = 30 * Math.sin(boid.theta_history[i])

      const angle = Math.atan(perpSlope);
      const dx = length * Math.cos(angle);
      const dy = length * Math.sin(angle);

      ctx.moveTo(midPoint[0] - dx, midPoint[1] - dy);
      ctx.lineTo(midPoint[0] + dx, midPoint[1] + dy);
    }

    ctx.stroke();
    ctx.closePath();
  }
}

function drawBoid(ctx, boid) {

  const angle = Math.atan2(boid.dy, boid.dx);
  ctx.translate(boid.x, boid.y);
  ctx.rotate(angle);
  ctx.translate(-boid.x, -boid.y);
  // ctx.fillStyle = "#558cf4";
  ctx.fillStyle = "#000000";
  ctx.strokeStyle = "#558cf4";
  ctx.lineWidth = 3;

  ctx.beginPath();
  ctx.moveTo(boid.x, boid.y);
  ctx.lineTo(boid.x - 15, boid.y + 5);
  ctx.lineTo(boid.x - 15, boid.y + 5);
  ctx.lineTo(boid.x - 30, boid.y);
  ctx.lineTo(boid.x - 15, boid.y - 5);
  ctx.lineTo(boid.x, boid.y);
  ctx.fill();

  // first two triangle <>
  ctx.beginPath();
  ctx.moveTo(boid.x, boid.y);
  ctx.lineTo(boid.x - 15, boid.y + 5);
  ctx.lineTo(boid.x - 15, boid.y - 5);
  ctx.lineTo(boid.x, boid.y);
  ctx.fill();
  ctx.closePath();

  ctx.beginPath();
  ctx.moveTo(boid.x - 15, boid.y);
  ctx.lineTo(boid.x - 30, boid.y + 5);
  ctx.lineTo(boid.x - 30, boid.y - 5);
  ctx.lineTo(boid.x - 15, boid.y);
  ctx.fill();
  ctx.closePath();

  
  let wing_length = 30 * Math.sin(boid.theta)

  // wing 1
  ctx.beginPath()
  ctx.moveTo(boid.x - 15, boid.y + wing_length);
  ctx.lineTo(boid.x - 15 + 5, boid.y );
  ctx.lineTo(boid.x - 15 - 5, boid.y);
  ctx.moveTo(boid.x - 15, boid.y + wing_length);
  ctx.fill()
  ctx.closePath();

  // wing 2
  ctx.beginPath()
  ctx.moveTo(boid.x - 15, boid.y - wing_length);
  ctx.lineTo(boid.x - 15 + 5, boid.y );
  ctx.lineTo(boid.x - 15 - 5, boid.y);
  ctx.moveTo(boid.x - 15, boid.y - wing_length);
  ctx.fill()
  ctx.closePath();

  ctx.setTransform(1, 0, 0, 1, 0, 0);

}

// Main animation loop
function animationLoop() {

  dt = 0.3;
  // run this function every 0.1 seconds
  for (let i = 0; i < 1 / dt; i += 1){

  // Update each boid

  let radius = 100;
  for (let boid of boids) {

    // Update the velocities according to each rule
    flyTowardsCenter(boid);
    avoidOthers(boid);
    matchVelocity(boid);
    limitSpeed(boid);
    keepWithinBounds(boid);
    update_theta(boid)
    avoidMouse(boid, radius);

    // Update the position based on the current velocity
    boid.x += boid.dx * dt;
    boid.y += boid.dy * dt;

    boid.history.push([boid.x, boid.y]);
    boid.theta_history.push(boid.theta);
    boid.dx_history.push(boid.dx);
    boid.dy_history.push(boid.dy);

    let max_hist = 50 / dt;
    boid.history = boid.history.slice(-max_hist);
    boid.theta_history = boid.theta_history.slice(-max_hist);
    boid.dx_history = boid.dx_history.slice(-max_hist);
    boid.dy_history = boid.dy_history.slice(-max_hist);
  }

  }

  // Clear the canvas and redraw all the boids in their current positions
  const ctx = document.getElementById("boids").getContext("2d");
  ctx.clearRect(0, 0, width, height);
  for (let boid of boids) {
    drawTrail(ctx, boid);
  }
  for (let boid of boids) {
    drawBoid(ctx, boid);
  }



  // Schedule the next frame
  window.requestAnimationFrame(animationLoop);
}

window.onload = () => {

  setupMousePositionListener();
  // Make sure the canvas always fills the whole window
  window.addEventListener("resize", sizeCanvas, false);
  sizeCanvas();

  // Randomly distribute the boids to start
  initBoids();

  // Schedule the main animation loop
  window.requestAnimationFrame(animationLoop);
};

</script>

---
