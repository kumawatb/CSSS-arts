[
  {
    "objectID": "projects/p5test.html",
    "href": "projects/p5test.html",
    "title": "P5JS Test",
    "section": "",
    "text": "This page is to test p5js functionality in quarto notebooks.\nP5 = require(\"p5\")\n\nfunction* createSketch(sketch) {\n  const element = DOM.element('div');\n  yield element;\n  const instance = new P5(sketch, element, true);\n  try {\n    while (true) {\n      yield element;\n    }\n  } finally {\n    instance.remove();\n  }\n}",
    "crumbs": [
      "Home",
      "Projects",
      "P5JS Test"
    ]
  },
  {
    "objectID": "projects/p5test.html#donut-test",
    "href": "projects/p5test.html#donut-test",
    "title": "P5JS Test",
    "section": "Donut test",
    "text": "Donut test\n\n\nCode\ncreateSketch(s =&gt; {\n\n  s.setup = function() {\n    s.createCanvas(746, 746, s.WEBGL);\n    s.noStroke();\n  }\n\n  s.draw = function() {\n\n    s.background(0);\n\n    let locX = s.mouseX - s.height / 2;\n    let locY = s.mouseY - s.width / 2;  \n    \n    s.ambientLight(60, 60, 60);\n    s.pointLight(190, 80, 190, locX, locY, 100);\n    s.pointLight(80, 80, 190, 0, 0, 100);\n  \n    s.specularMaterial(255);\n    s.rotateX(s.frameCount * 0.01);\n    s.rotateY(s.frameCount * 0.01);\n    s.torus(150, 80, 64, 64);\n  }\n\n})",
    "crumbs": [
      "Home",
      "Projects",
      "P5JS Test"
    ]
  },
  {
    "objectID": "projects/flocking.html",
    "href": "projects/flocking.html",
    "title": "Bird flocking",
    "section": "",
    "text": "Simulation of birds flocking with wing synchronization.",
    "crumbs": [
      "Home",
      "Projects",
      "Bird flocking"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site",
    "crumbs": [
      "Home",
      "About"
    ]
  },
  {
    "objectID": "projects/beatpad.html",
    "href": "projects/beatpad.html",
    "title": "Chaos sampler",
    "section": "",
    "text": "This page demonstrates various uses of a beat pad (grid of buttons) to demonstrate the game of life, cellular automata, chaotic attractors, and the Ising/Potts models.\n\nP5 = require(\"p5\")\n\nfunction* createSketch(sketch) {\n  const element = DOM.element('div');\n  yield element;\n  const instance = new P5(sketch, element, true);\n  try {\n    while (true) {\n      yield element;\n    }\n  } finally {\n    instance.remove();\n  }\n}\n\ncreateSketch(s =&gt; {\n  let cols = 8;\n  let rows = 8;\n  let buttonSize = 50;\n  let buttons = [];\n\n  s.setup = function() {\n    s.createCanvas(cols * buttonSize, rows * buttonSize);\n    for (let i = 0; i &lt; cols; i++) {\n      buttons[i] = [];\n      for (let j = 0; j &lt; rows; j++) {\n        buttons[i][j] = new GridButton(i * buttonSize, j * buttonSize, buttonSize);\n      }\n    }\n  };\n\n  s.draw = function() {\n    s.background(255);\n    for (let i = 0; i &lt; cols; i++) {\n      for (let j = 0; j &lt; rows; j++) {\n        buttons[i][j].display();\n      }\n    }\n  };\n\n  s.mousePressed = function() {\n    for (let i = 0; i &lt; cols; i++) {\n      for (let j = 0; j &lt; rows; j++) {\n        buttons[i][j].checkClick();\n      }\n    }\n  };\n\n  class GridButton {\n    constructor(x, y, size) {\n      this.x = x;\n      this.y = y;\n      this.size = size;\n      this.color = s.color(255);\n    }\n\n    display() {\n      s.fill(this.color);\n      s.rect(this.x, this.y, this.size, this.size);\n    }\n\n    checkClick() {\n      if (s.mouseX &gt; this.x && s.mouseX &lt; this.x + this.size &&\n          s.mouseY &gt; this.y && s.mouseY &lt; this.y + this.size) {\n        this.color = s.color(s.random(255), s.random(255), s.random(255));\n      }\n    }\n  }\n});",
    "crumbs": [
      "Home",
      "Projects",
      "Chaos sampler"
    ]
  },
  {
    "objectID": "projects/beatpad.html#button-layout-test",
    "href": "projects/beatpad.html#button-layout-test",
    "title": "Beatpad Chaos",
    "section": "Button layout test",
    "text": "Button layout test\nlet buttons = [];\nlet cols = 8;\nlet rows = 8;\nlet buttonSize = 50;\n\nfunction setup() {\n  createCanvas(cols * buttonSize, rows * buttonSize);\n  for (let i = 0; i &lt; cols; i++) {\n    buttons[i] = [];\n    for (let j = 0; j &lt; rows; j++) {\n      buttons[i][j] = new GridButton(i * buttonSize, j * buttonSize, buttonSize);\n    }\n  }\n}\n\nfunction draw() {\n  for (let i = 0; i &lt; cols; i++) {\n    for (let j = 0; j &lt; rows; j++) {\n      buttons[i][j].display();\n    }\n  }\n}\n\nfunction mousePressed() {\n  for (let i = 0; i &lt; cols; i++) {\n    for (let j = 0; j &lt; rows; j++) {\n      buttons[i][j].checkClick();\n    }\n  }\n}\n\nclass GridButton {\n  constructor(x, y, size) {\n    this.x = x;\n    this.y = y;\n    this.size = size;\n    this.color = color(255);\n  }\n\n  display() {\n    fill(this.color);\n    rect(this.x, this.y, this.size, this.size);\n  }\n\n  checkClick() {\n    if (mouseX &gt; this.x && mouseX &lt; this.x + this.size &&\n        mouseY &gt; this.y && mouseY &lt; this.y + this.size) {\n      this.color = color(random(255), random(255), random(255));\n    }\n  }\n}",
    "crumbs": [
      "Home",
      "Projects",
      "Beatpad Chaos"
    ]
  },
  {
    "objectID": "projects/gallery.html",
    "href": "projects/gallery.html",
    "title": "Gallery of complexity",
    "section": "",
    "text": "Pretty pictures coming out of complexity research.",
    "crumbs": [
      "Home",
      "Projects",
      "Gallery of complexity"
    ]
  },
  {
    "objectID": "projects/guessing.html",
    "href": "projects/guessing.html",
    "title": "Collective guessing",
    "section": "",
    "text": "Should you listen to other people? Guess the answers to 10 quick estimation problems to find out!",
    "crumbs": [
      "Home",
      "Projects",
      "Collective guessing"
    ]
  },
  {
    "objectID": "projects/chaos_sampler.html",
    "href": "projects/chaos_sampler.html",
    "title": "Chaos sampler",
    "section": "",
    "text": "Chopping up samples using chaos (the Lorentz attractor)\nPlay Sound",
    "crumbs": [
      "Home",
      "Projects",
      "Chaos sampler"
    ]
  },
  {
    "objectID": "projects/phase_transition.html",
    "href": "projects/phase_transition.html",
    "title": "Chaos sampler",
    "section": "",
    "text": "Chopping up samples using chaos (the Lorentz attractor)\nPlay Sound"
  },
  {
    "objectID": "projects/game_of_life.html",
    "href": "projects/game_of_life.html",
    "title": "Chaos sampler",
    "section": "",
    "text": "Using chaos to resample music.",
    "crumbs": [
      "Home",
      "Projects",
      "Chaos sampler"
    ]
  }
]